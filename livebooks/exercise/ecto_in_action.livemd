# Ecto in action

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

## Review Questions

- Am I be able to implement a basic CRUD scenario with data insertion, validation, and querying? Starting from a context boundary to schema and DB column?
- How to ensure data integrity in typical cases?
- I covered preparing seeds with Faker, to have a dataset for further exercises

## Plan

This workbook will be fully practical. We are going to combine all the previous knowledge in action. Previous lesson described in detail modeling a simple CRUD domain with Phoenix context with Ecto. In this, we will replay similar steps but in our Pokemon example. Whole task will be the extension of the final exercise from [Phoenix app setup](./exercise/phoenix_app_setup.livemd)

Requirements breakdown:

- Do you remember `Pokemon.Pokedex.Pokemon{}` struct with `name` field? We are going to change it as follows:
  - now it should be `Ecto.Schema` our model will be stored in DB
  - add following fields:
    - `hp` - integer, should be in range 10-100
    - `attack` - integer, should be greater than 0
    - `defense` - integer, should be greater than 0
    - `speed` - integer, should be greater than 0
    - `name` - string
      - not longer than 80 characters
      - should be unique
    - `type` - enum that defines origin of Pokemon (nature, fire etc)
      - try use `Ecto.Enum` for that
      - you can find possible values with `curl --location 'https://pokeapi.co/api/v2/type/?limit=0&offset=0' | jq '.results[].name'` (assumes `jq` installed on your computer)
- ensure DB receives above schema
  - write migration, you can use `mix ecto.gen.migration migration_name` to create a scaffold
  - migrate DB with `mix ecto.migrate`
- write functions in context module `Pokemon.Pokedex` for creating, and deleting Pokemon
- write tests schema and contexts
- prepare seeds for 20 pokemons in `apps/pokemon/priv/repo/seeds.exs`
  - you can use Faker for generating stuff
  - check out documentation of `Ecto.Enum` for accessing values
- wire previous function `Pokemon.Pokedex.random_pack/1` with DB storage
- expose all new pokemon fields in `/api/pokemons/random` endpoint

## Further Reading

Consider the following resource(s) to deepen your understanding of the topic.

- [Phoenix Generators: mix phx.gen](https://hexdocs.pm/phoenix/Mix.Tasks.Phx.Gen.html#content)
- [Phoenix HTML Generator: mix phx.gen.html](https://hexdocs.pm/phoenix/Mix.Tasks.Phx.Gen.html#content)
- [Phoenix Schema Generator Types](https://hexdocs.pm/phoenix/Mix.Tasks.Phx.Gen.Schema.html#module-attributes)
- [Pragmatic Bookshelf: Programming Ecto](https://pragprog.com/titles/wmecto/programming-ecto/)

## Commit Your Progress

## Navigation
