# Phoenix overview

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

## Review Questions

- What are the differences between Mix project and Phoenix project?
- What's the recommended way of structuring Phoenix project?
- How Phoenix approaches MVC?
- What are the layers of a Phoenix application?
- Where is the “model” from MVC in Phoenix?
- What is the context and how it is structured?
- How to create a new Phoenix application with **mix phx.new**?
- What's included into Phoenix?

## Overview

### Phoenix

The [Phoenix Framework](https://phoenixframework.org/) is the most popular web development framework for Elixir. Using Phoenix, we can build rich interactive and real-time web applications quickly.

[Chris McCord](http://chrismccord.com/), the creator of Phoenix, has an excellent video to demonstrate the power of Phoenix. You may follow along and build a Twitter clone application in only 15 minutes.

<!-- livebook:{"attrs":"eyJzb3VyY2UiOiJZb3VUdWJlLm5ldyhcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9TVp2bVlhRmtOSklcIikiLCJ0aXRsZSI6IkJ1aWxkIGEgcmVhbC10aW1lIFR3aXR0ZXIgY2xvbmUgaW4gMTUgbWludXRlcyB3aXRoIExpdmVWaWV3In0","chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
YouTube.new("https://www.youtube.com/watch?v=MZvmYaFkNJI")
```

The video above uses [Phoenix LiveView](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html) to create interactive and real-time features. We will cover LiveView in a future lesson.

Generating new Phoenix application is as simple as:

```bash
mix phx.new my_app
```

<!-- livebook:{"break_markdown":true} -->

### What's included after `mix phx.new`?

- database toolkit (migrations, schema mapping, querying and much more) via [Ecto](https://hexdocs.pm/ecto)
- authentication system - [**mix phx.gen.auth**](https://hexdocs.pm/phoenix/mix_phx_gen_auth.html)
- email sending engine [Swosh](https://hexdocs.pm/swoosh/Swoosh.html)
- testing framework **ExUnit**
- web-framework building blocks
  - HTTP server - leveraging Erlang scalability
  - web-sockets support
  - routing, controllers, plugs (middleware)
- tools for creating real-time, rich interaction web-apps with [Phoenix LiveView](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html)
  - modern component engine (defining attrs, slots, handling actions)
  - [JS interoperability](https://hexdocs.pm/phoenix_live_view/js-interop.html)
  - TailwindCSS
- App localization - [Gettext](https://hexdocs.pm/gettext)
- LiveDashboard for inspecting deployments [LiveDashboard](https://hexdocs.pm/phoenix_live_dashboard/Phoenix.LiveDashboard.html)
  - ![a](https://github.com/phoenixframework/phoenix_live_dashboard/raw/main/screenshot.png)
- release and configuration management - Elixir releases are standalone binaries
- hot code swapping - we can recompile code on the production (useful in certain cases)
- observability built in the ecosystem - [Telemetry](https://hexdocs.pm/telemetry/Telemetry.html)
- local and production REPL - IEx

### How it can be extended further with great libraries:

- exposing GraphQL API - [Absinthe](https://hexdocs.pm/absinthe)
- HTTP clients - [Tesla](https://hexdocs.pm/tesla)
- supporting mocking in tests [Mox](https://hexdocs.pm/mox) (library written by Jose Valim)
- async jobs - [Oban](https://hexdocs.pm/oban)
- feature flags - [FunWithFlags](https://hexdocs.pm/fun_with_flags)

...and much more to be found https://github.com/h4cc/awesome-elixir

## Model View Controller (MVC) Architecture

Phoenix is heavily influenced by MVC architecture, where an application is broken into several layers using [Model-View-Controller (MVC)](https://en.wikipedia.org/wiki/Model–view–controller) architecture.

- **Model**: Manages the data and business logic of the application.
- **View**: Represents visual information.
- **Controller**: Handles requests and manipulates the model/view to respond to the user.

More recently, Phoenix has been breaking away from strict MVC architecture, but understanding this style of architecture will help us better understand the overall design choices behind Phoenix.

![test](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/MVC-Process.svg/300px-MVC-Process.svg.png)

> source: https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller

<!-- livebook:{"branch_parent_index":2} -->

## Layered Architecture

Phoenix breaks the complexity of our application into several layers with different responsibilities. Separating an application into layers simplifies reasoning about and collaborating on complex applications.

Phoenix generates the following layers of our architecture by default.

- **Endpoint**: The boundary layer of the application.
- **Router**: Routes the request to the correct controller.
- **Controller**: Handles the request—generally, the controller delegates to the Model and View to manipulate business logic and return a response.
- **Context**: a module that defines functions related to a specific part of your application, such as users or products. It helps to organize and simplify your code by separating concerns and making it easier to maintain.
- **Schema**: A schema maps the database data into an Elixir struct.
- **Migration**: Migrations are used to make changes to the database schema over time, such as adding, removing, or altering tables.
- **Component**: Handles returning the response and may delegate to a template.
- **Template**: Builds a response, typically using HEEx (HTML + Embedded Elixir) to build an HTML web page.

![](images/Phoenix%201.7%20Architecture%20Diagram.png)

## Project Structure

Phoenix allows to organize project structure in two ways:

- single Mix app
- as an umbrella project

It is controlled by `--umbrella` argument passed to `mix phx.new`. Our recommendation based on previous experience is going for umbrella projects. Further exercises will assume operating under the umbrella.

So what can we expect after running `mix phx.new app --umbrella`? We should have following directory structure:

```bash
├── README.md
├── _build
├── .formatter.exs
├── .gitignore
├── apps
│   ├── app
│   │   ├── README.md
│   |   ├── .formatter.exs
│   |   ├── .gitignore
│   │   ├── lib
│   │   │   ├── app
│   │   │   └── app.ex
│   │   ├── mix.exs
│   │   ├── priv
│   │   │   └── repo
│   │   └── test
│   │       ├── support
│   │       └── test_helper.exs
│   └── app_web
│       ├── README.md
│       ├── .formatter.exs
│       ├── .gitignore
│       ├── assets
│       │   ├── css
│       │   ├── js
│       │   ├── tailwind.config.js
│       │   └── vendor
│       ├── lib
│       │   ├── app_web
│       │   └── app_web.ex
│       ├── mix.exs
│       ├── priv
│       │   ├── gettext
│       │   └── static
│       └── test
│           ├── app_web
│           ├── support
│           └── test_helper.exs
├── config
│   ├── config.exs
│   ├── dev.exs
│   ├── prod.exs
│   ├── runtime.exs
│   └── test.exs
├── mix.exs
└── mix.lock
```

Phoenix projects use `Mix` so this folder structure should feel somewhat familiar. Here's a breakdown of each file/folder.

### What's shared between apps:

- **\_build**: Build artifacts, such as compiled .beam code.
- **config**: Configuration files for the application, such as the database configuration and environment-specific settings.
- **deps**: Compiled project dependencies, which Mix manages.
- **README.md**: Contains information about the project, such as installation instructions or documentation.
- **mix.lock**: The exact versions of the dependencies used in the application, generated by Mix.
- **mix.exs**: Configures the umbrella project's dependencies and other settings.
- **formatter.exs**: Formatter configuration.
- **.gitignore**: Configuration for files that should be ignored in .git.

### In `apps/app_web` we have code for web application:

- **assets**: Static assets, such as JavaScript and CSS.
- **lib**: The application's source code.
  - **app_web**: The web-specific code for the application, such as controllers, components, and templates.
  - **app_web.ex**: The main web module, which configures the Phoenix application.
- **priv**: The "priv" directory in Phoenix contains resources needed for production that are not part of the source code, including static files such as images and fonts and generated assets from the "assets" directory.
- **test**: Tests for the application.
- **formatter.exs**
- **.gitignore**
- **mix.exs**: Configures the app_web dependencies and settings.

### In `apps/app` we have place for our domain code:

- **lib**: The application's source code.
  - **app**: The business logic for the application, organized into contexts.
  - **app.ex**: The main application module, which starts the web server and configures the application.
- **test**: Tests for the application.
- **formatter.exs**
- **.gitignore**
- **mix.exs**: Configures the app dependencies and settings.
<!-- livebook:{"branch_parent_index":2} -->

## Web Project Structure

Requests flow through the Plug Pipeline. The router, controller, component, and template each play an important role in returning a response to the user request.

```mermaid
flowchart TB
    plug["%Plug.Conn{}"]-->Endpoint
    Endpoint-->Router
    Router-->Controller
    Controller
```

### Conn

In a Phoenix app, "conn" stands for "connection". It represents the connection between the client and the web server, and contains information about the HTTP request and response.

The conn struct is a central concept in Phoenix and is used extensively throughout the framework. It is created when a client sends a request to the server and is passed around between the various parts of the application as the request is processed.

It contains information such as the HTTP method, the request path, request headers, request body, and response headers. It also includes information about the client's session and any authentication information, among other things.

This is one of numerous examples of so called "token transformation" in Elixir ecosystem. Probably you remember passing list to subsequent `Enum` functions or transforming map with `Map`. Here we have similar pattern, each component accepts and returns `%Plug.Conn{}` structure.

> Can you think of other examples of such transformations in language that you know?

### Router

Phoenix generates a `router.ex` file that configures the URLs that clients can send HTTP requests to. See [Routing](https://hexdocs.pm/phoenix/routing.html) documentation for a full guide.

The Phoenix router uses the [pipeline/2](https://hexdocs.pm/phoenix/Phoenix.Router.html#pipeline/2) macro to setup a plug pipeline.

<!-- livebook:{"force_markdown":true} -->

```elixir
pipeline :api do
  plug :accepts, ["json"]
end
```

Then the [scope/2] macro groups related routes together under a common base URL. Inside of the scope, the [get/4](https://hexdocs.pm/phoenix/Phoenix.Router.html#get/4), [post/4](https://hexdocs.pm/phoenix/Phoenix.Router.html#post/4), [put/4](https://hexdocs.pm/phoenix/Phoenix.Router.html#put/4), [patch/4](https://hexdocs.pm/phoenix/Phoenix.Router.html#patch/4), and [delete/4](https://hexdocs.pm/phoenix/Phoenix.Router.html#delete/4) macros can handle a specific HTTP request and delegate to a controller to return a response.

<!-- livebook:{"force_markdown":true} -->

```elixir
scope "/", AppWeb do
  pipe_through :api

  get "/posts", PostController, :index
  post "/posts", PostController, :create

  get "/posts/:id", PostController, :show
  put "/posts/:id", PostController, :update
end
```

### Controller

Controllers in the `apps/app_web/lib/app_web/controllers` manage the response to the HTTP request.

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule AppWeb.PostController do
  use AppWeb, :controller

  def index(conn, _params) do
    conn
    |> render(:index, posts: [%{id: 1, title: "Post 1"}, %{id: 2, title: "Post 2"}])
  end

  def show(conn, %{"id" => id}) do
    conn
    |> render(:show, post: %{id: id, title: "Post #{id}"})
  end

  def update(conn, %{"id" => id} = params) do
    conn
    |> render(:show, post: %{id: id, title: "Post #{id}"})
  end
end
```

### Controller Params

Controllers actions accept `params` as the second argument. `params` is a combined map of comma-separated query params, the [body](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) of the request, and dynamic values in the URL.

For example, if we sent a PUT request to the following URL:

http://localhost:4000/api/posts/1/?param1=some_value,param2=some_value

With the following data in the POST body:

<!-- livebook:{"force_markdown":true} -->

```elixir
%{body_param: "value"}
```

Assuming we had the following route defined.

<!-- livebook:{"force_markdown":true} -->

```elixir

put "/posts/:id", PostController, :update
```

Then the `params` in the controller would be bound to:

<!-- livebook:{"force_markdown":true} -->

```elixir
%{
  "body_param" => "value",
  "id" => "1",
  "param1" => "some_value",
  "param2" => "some_value"
}
```

### Assigns

The [Plug.Conn](https://hexdocs.pm/plug/Plug.Conn.html) stores an `assigns` map that is injected into the HEEx template. Values in the `assigns` map can be bound by providing a keyword list as the third argument of the [Controller.render/3](https://hexdocs.pm/phoenix/Phoenix.Controller.html#render/3) function.

The controller delegates job to a [JSON view](https://hexdocs.pm/phoenix/json_and_apis.html#rendering-json) in a corresponding `*JSON` module to return a JSON. The atom `:index` above corresponds to the function `index/1` called in the component module. Further arguments are passed to the view module as `assigns`.

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule AppWeb.PostJSON do
  def index(%{posts: posts}) do
    %{data: for(post <- posts, do: data(post))}
  end

  def show(%{post: post}) do
    %{data: data(post)}
  end

  defp data(%{} = post) do
    %{
      id: post.id,
      title: post.title
    }
  end
end
```

## Further Reading

For more on Phoenix, consider the following resources.

- [Phoenix HexDocs](https://hexdocs.pm/phoenix/Phoenix.html)
- [Plug HexDocs](https://hexdocs.pm/plug/readme.html)
- [Phoenix a Web Framework for the New Web • José Valim • GOTO 2016](https://www.youtube.com/watch?v=bk3icU8iIto&ab_channel=GOTOConferences)

## Commit Your Progress

## Navigation
